# Libraries
import pandas as pd
from dash import Dash, dcc, html, Input, Output
import plotly.express as px

# Read data
spacex_df = pd.read_csv("spacex_launch_dash.csv")
min_payload = float(spacex_df['Payload Mass (kg)'].min())
max_payload = float(spacex_df['Payload Mass (kg)'].max())

# Dash application
app = Dash(__name__)

# Dropdown options
launch_sites = [{'label': 'All Sites', 'value': 'ALL'}] + [
    {'label': s, 'value': s} for s in sorted(spacex_df['Launch Site'].unique())
]

# Layout
app.layout = html.Div([
    html.H1(
        'SpaceX Launch Records Dashboard',
        style={'textAlign': 'center', 'color': '#503D36', 'fontSize': 40}
    ),

    dcc.Dropdown(
        id='site-dropdown',
        options=launch_sites,
        value='ALL',
        placeholder="Select a Launch Site here",
        searchable=True
    ),
    html.Br(),

    html.Div(dcc.Graph(id='success-pie-chart')),
    html.Br(),

    html.P("Payload range (Kg):"),
    dcc.RangeSlider(
        id='payload-slider',
        min=0, max=10000, step=1000,
        value=[min_payload, max_payload],
        marks={
            2500: {'label': '2500 (Kg)'},
            5000: {'label': '5000 (Kg)'},
            7500: {'label': '7500 (Kg)'}
        }
    ),

    html.Div(dcc.Graph(id='success-payload-scatter-chart')),
])

# --- Callbacks ---

# Pie chart: total successes by site (ALL) or success vs failure for a given site
@app.callback(
    Output('success-pie-chart', 'figure'),
    Input('site-dropdown', 'value')
)
def update_pie(site):
    if site == 'ALL':
        df = (spacex_df
              .groupby('Launch Site', as_index=False)['class']
              .sum())
        fig = px.pie(
            df,
            values='class',
            names='Launch Site',
            title='Total Successful Launches by Site'
        )
    else:
        site_df = spacex_df[spacex_df['Launch Site'] == site]
        success = int(site_df['class'].sum())
        failure = int(len(site_df) - success)
        df = pd.DataFrame({
            'Outcome': ['Success', 'Failure'],
            'Count': [success, failure]
        })
        fig = px.pie(
            df,
            values='Count',
            names='Outcome',
            title=f'Launch Outcomes for {site}'
        )
    return fig

# Scatter: payload vs success, filtered by site and payload range
@app.callback(
    Output('success-payload-scatter-chart', 'figure'),
    [Input('site-dropdown', 'value'),
     Input('payload-slider', 'value')]
)
def update_scatter(site, payload_range):
    low, high = payload_range
    mask = spacex_df['Payload Mass (kg)'].between(low, high)
    df = spacex_df[mask].copy()
    if site != 'ALL':
        df = df[df['Launch Site'] == site]

    fig = px.scatter(
        df,
        x="Payload Mass (kg)",
        y="class",
        color="Booster Version Category",
        title=("Payload vs. Launch Success"
               if site == 'ALL' else f"Payload vs. Launch Success — {site}"),
        hover_data=["Launch Site"]
    )
    # Make y-axis more readable (0/1 → Failure/Success)
    fig.update_yaxes(tickmode='array', tickvals=[0, 1], ticktext=['Failure', 'Success'])
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)

